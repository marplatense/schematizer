# -*- coding: utf-8 -*-
import datetime
import decimal
import unittest

import colander
from sqlalchemy import (
    create_engine,
    Column, Integer, String, DateTime, Numeric, Text
    )
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

from schematizer import generic_init, CommonBehavior

class SimpleModelTest(unittest.TestCase):
    def setUp(self):
        engine = create_engine('sqlite:///:memory:', echo=True)
        session = sessionmaker(bind=engine)
        self.session = session()
        base = declarative_base(cls=(CommonBehavior, ), constructor=generic_init)

        class Basic(base):
            __tablename__ = "basic"
            id = Column(Integer, primary_key=True, autoincrement=True, doc='Unique sequential value: autogenerated')
            name = Column(String(100), unique=True, nullable=False, doc='Name of this object. It has to be unique')
            sdate = Column(DateTime, nullable=False, doc='Starting date for this object')
            edate = Column(DateTime, doc='End date for this object')
            value = Column(Numeric, nullable=False, doc='Cost of this object',
                           info={'colander': dict(validators=colander.Range(decimal.Decimal('0.01'),
                                                                            decimal.Decimal('9.99')),
                                                  typ=colander.Decimal())})
            memo = Column(Text, doc='Free text comment about this object')
        base.metadata.create_all(engine)
        self.basic = Basic

    def test_basic_attr(self):
        dict_to_validate = {'name':'This is a test', 'sdate':datetime.datetime.now(),
                            'value':decimal.Decimal('1.55'), 'memo': u"This is an example of text to validate. "
                                                                     u"Please do and check: ñ"}
        bs = self.basic(self.session, **dict_to_validate)
        self.assertEqual(bs.name, 'This is a test')
        self.assertEqual(bs.edate, None)
        self.assertEqual(bs.value, decimal.Decimal('1.55'))

    def test_length_error(self):
        dict_to_validate = {'name':'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\
                                   'aaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbb', 'sdate':datetime.datetime.now(),
                            'value':decimal.Decimal('1.55'),
                            'memo': u"This is an example of text to validate. Please do and check: ñ"}
        try:
            bs = self.basic(self.session, **dict_to_validate)
        except Exception as e:
            self.assertEqual(len(e.children), 1)
            self.assertDictEqual(e.children[0].asdict(), {'name':u'Longer than maximum length 100'})

    def test_number_type(self):
        dict_to_validate = {'name':'This is a test', 'sdate':datetime.datetime.now(),
                            'value':u'aa', 'memo': u"This is an example of text to validate. Please do and check: ñ"}
        try:
            bs = self.basic(self.session, **dict_to_validate)
        except Exception as e:
            self.assertEqual(len(e.children), 1)
            self.assertDictEqual(e.children[0].asdict(), {'value': u'"aa" is not a number'})

    def test_date_type(self):
        dict_to_validate = {'name':'This is a test', 'sdate':u'aa',
                            'value':decimal.Decimal('1.55'), 'memo': u"This is an example of text to validate. "\
                                                                     u"Please do and check: ñ"}
        try:
            bs = self.basic(self.session, **dict_to_validate)
        except Exception as e:
            self.assertEqual(len(e.children), 1)
            self.assertDictEqual(e.children[0].asdict(), {'sdate': 'aa cannot be parsed to date'})

    def test_date_ddMMMyy(self):
        dict_to_validate = {'name':'This is a test', 'sdate':u'04-01-2013',
                            'value':decimal.Decimal('1.55'), 'memo': u"This is an example of text to validate. " \
                                                                     u"Please do and check: ñ"}
        bs = self.basic(self.session, **dict_to_validate)
        self.assertEqual(bs.sdate, datetime.date(2013-04-01))
